    Regular Expressions

.test ---> return true or false syntax... regexVarName.test(strVarName)

.match ---> returns array(if regex match) and returns null (if regex is not match) syntax ... strVarName.match(regexVarName) 

| ---> or operator 

i ---> ignorecase flag

g ---> global flag

wildcard character ( . )  ---> match any one character

[  ] ---> use for matching group of characters for example /b[iau]g/

[ - ] ---> use hyphen to match a range of characters for example /[a-e]at / or /[1-5]/

^ ---> match from the begining of string /^abc/    & 
also use for negated character sets (characters you do not want to match) use it in after the opening bracket 
and before the characters you do not want to match. like /[^aeiou]/ so it will not return these characters

$ ---> match at the end of string

+ ---> match a character or group of characters that appears one or more times in a row 

* ---> match zero or more characters

? ---> character before this is optional but any 1 character for example / hel?lo/ it means l is optional  

greedy match ---> return longest part of a string
lazy match ---> return smallest part of a string

\w ---> shorthand character of [A-Za-z0-9_]

\W ----> [^A-Za-z0-9_] 

\d ---> match all numbers [0-9]

\D ---> match all non-numbers [^0-9] 

\s ---> match spaces

\S ---> match non-spaces

quantity specifier ---> use curly brackets for matching quantity {2,5} , {2,} , {2}
 
positive lookahead (?=...) ( ... represents search pattern in ?=... ) --->  positive lookahead checks the element(in search pattern) is present in string or not 
if present it returns the previous elements of search patterns and if not present then return(null)


negative lookahead (?!...) ( ... represents search pattern in ?!... ) --->  negative lookahead checks the element(in search pattern) is present in string or not 
if not present it returns the previous elements of search patterns and if present then return(null)
